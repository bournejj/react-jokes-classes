{"ast":null,"code":"var _jsxFileName = \"/Users/jackbourne/Documents/Springboard/react-jokes-classes 2/src/JokeListClassComponent.js\";\nimport React from 'react';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass JokeListClass extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jokes: []\n    };\n    this.getNewJokes = this.getNewJokes.bind(this);\n    this.resetVotes = this.resetVotes.bind(this);\n    this.toggleLock = this.toggleLock.bind(this);\n    this.vote = this.vote.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(this.state.jokes.length);\n    if (this.state.jokes.length <= 0) this.getJokes();\n  }\n\n  componentDidUpdate() {\n    if (this.state.jokes.length <= 0) this.getJokes();\n  }\n\n  async getJokes() {\n    try {\n      // load jokes one at a time, adding not-yet-seen jokes\n      let jokes = this.state.jokes;\n      let jokeVotes = JSON.parse(window.localStorage.getItem(\"jokeVotes\") || \"{}\");\n      let seenJokes = new Set(jokes.map(j => j.id));\n\n      while (jokes.length < 10) {\n        let res = await axios.get(\"https://icanhazdadjoke.com\", {\n          headers: {\n            Accept: \"application/json\"\n          }\n        });\n        let {\n          status,\n          ...joke\n        } = res.data;\n\n        if (!seenJokes.has(joke.id)) {\n          seenJokes.add(joke.id);\n          jokeVotes[joke.id] = jokeVotes[joke.id] || 0;\n          jokes.push({ ...joke,\n            votes: jokeVotes[joke.id],\n            locked: false\n          });\n        } else {\n          console.log(\"duplicate found!\");\n        }\n      }\n\n      this.setState({\n        jokes\n      });\n      window.localStorage.setItem(\"jokeVotes\", JSON.stringify(jokeVotes));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  getNewJokes() {\n    this.setState({\n      jokes: []\n    });\n    console.log(this.state.jokes);\n  }\n\n  resetVotes() {\n    window.localStorage.setItem(\"jokeVotes\", \"{}\");\n    this.setState(st => ({\n      jokes: st.jokes.map(joke => ({ ...joke,\n        votes: 0\n      }))\n    }));\n  }\n  /* change vote for this id by delta (+1 or -1) */\n\n\n  vote(id, delta) {\n    let jokeVotes = JSON.parse(window.localStorage.getItem(\"jokeVotes\"));\n    jokeVotes[id] = (jokeVotes[id] || 0) + delta;\n    window.localStorage.setItem(\"jokeVotes\", JSON.stringify(jokeVotes));\n    this.setState(st => ({\n      jokes: st.jokes.map(j => j.id === id ? { ...j,\n        votes: j.votes + delta\n      } : j)\n    }));\n  }\n\n  toggleLock(id) {\n    this.setState(st => ({\n      jokes: st.jokes.map(j => j.id === id ? { ...j,\n        locked: !j.locked\n      } : j)\n    }));\n  } // generateNewJokes() {\n  //     this.setState({\n  //     })\n  // }\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"JokeList\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"JokeList-getmore\",\n        onClick: this.getNewJokes,\n        children: \"Get New Jokes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this), this.state.jokes.map(j => /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: j\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nJokeListClass.defaultProps = {\n  numJokesToGet: 10\n};\nexport default JokeListClass;","map":{"version":3,"sources":["/Users/jackbourne/Documents/Springboard/react-jokes-classes 2/src/JokeListClassComponent.js"],"names":["React","axios","JokeListClass","Component","constructor","props","state","jokes","getNewJokes","bind","resetVotes","toggleLock","vote","componentDidMount","console","log","length","getJokes","componentDidUpdate","jokeVotes","JSON","parse","window","localStorage","getItem","seenJokes","Set","map","j","id","res","get","headers","Accept","status","joke","data","has","add","push","votes","locked","setState","setItem","stringify","e","st","delta","render","defaultProps","numJokesToGet"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from \"axios\";\n\n\n\nclass JokeListClass extends React.Component {\n\n    static defaultProps = {\n        numJokesToGet: 10\n      };\n    \n    constructor(props) {\n        super(props);\n        this.state = {jokes: [] }\n        this.getNewJokes = this.getNewJokes.bind(this)\n        this.resetVotes = this.resetVotes.bind(this);\n        this.toggleLock = this.toggleLock.bind(this);\n        this.vote = this.vote.bind(this);\n       \n        \n        \n        \n    }\n\n    componentDidMount() {\n        console.log(this.state.jokes.length)\n        if (this.state.jokes.length <= 0) this.getJokes();\n      }\n      componentDidUpdate() {\n        if (this.state.jokes.length <= 0) this.getJokes();\n      }\n    \n \nasync getJokes() {\n    \n    try {\n        // load jokes one at a time, adding not-yet-seen jokes\n        let jokes = this.state.jokes;\n        let jokeVotes = JSON.parse(\n          window.localStorage.getItem(\"jokeVotes\") || \"{}\"\n        );\n        let seenJokes = new Set(jokes.map(j => j.id));\n   \n    while (jokes.length < 10) {\n    let res = await axios.get(\"https://icanhazdadjoke.com\", {\n        headers: { Accept: \"application/json\" }\n      });\n \n    let { status, ...joke } = res.data;\n\n    if (!seenJokes.has(joke.id)) {\n      seenJokes.add(joke.id);\n      jokeVotes[joke.id] = jokeVotes[joke.id] || 0;\n      jokes.push({ ...joke, votes: jokeVotes[joke.id], locked: false });\n    } else {\n      console.log(\"duplicate found!\");\n    }\n  }\n\n  this.setState({ jokes });\n  window.localStorage.setItem(\"jokeVotes\", JSON.stringify(jokeVotes));\n} catch (e) {\n  console.log(e);\n}\n}\n    \n   \n\ngetNewJokes () {\n    this.setState({jokes: [] })\n    console.log(this.state.jokes)\n     \n  \n}\n\nresetVotes() {\n    window.localStorage.setItem(\"jokeVotes\", \"{}\");\n    this.setState(st => ({\n      jokes: st.jokes.map(joke => ({ ...joke, votes: 0 }))\n    }));\n  }\n\n  /* change vote for this id by delta (+1 or -1) */\n\n  vote(id, delta) {\n    let jokeVotes = JSON.parse(window.localStorage.getItem(\"jokeVotes\"));\n    jokeVotes[id] = (jokeVotes[id] || 0) + delta;\n    window.localStorage.setItem(\"jokeVotes\", JSON.stringify(jokeVotes));\n    this.setState(st => ({\n      jokes: st.jokes.map(j =>\n        j.id === id ? { ...j, votes: j.votes + delta } : j\n      )\n    }));\n  }\n\n  toggleLock(id) {\n    this.setState(st => ({\n      jokes: st.jokes.map(j => (j.id === id ? { ...j, locked: !j.locked } : j))\n    }));\n  }\n\n\n\n\n\n       \n    // generateNewJokes() {\n    //     this.setState({\n\n    //     })\n    // }\n    render() {\n\n        return (\n            <div className=\"JokeList\">\n            <button className=\"JokeList-getmore\" onClick={this.getNewJokes} >\n              Get New Jokes\n            </button>\n            {this.state.jokes.map(j => (\n                <h1>{j}</h1>\n        ))}\n            \n      \n          </div>\n        )\n    }\n}\nexport default JokeListClass;"]},"metadata":{},"sourceType":"module"}